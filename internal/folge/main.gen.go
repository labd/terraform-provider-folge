// Package folge provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package folge

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for DatatypeEnum.
const (
	Bool     DatatypeEnum = "bool"
	Datetime DatatypeEnum = "datetime"
	Int      DatatypeEnum = "int"
	Str      DatatypeEnum = "str"
)

// Defines values for OperatorEnum.
const (
	Eq  OperatorEnum = "eq"
	Gt  OperatorEnum = "gt"
	Lt  OperatorEnum = "lt"
	Neq OperatorEnum = "neq"
)

// Defines values for ApplicationsFormattedDestroyParamsFormat.
const (
	ApplicationsFormattedDestroyParamsFormatDotJson ApplicationsFormattedDestroyParamsFormat = ".json"
)

// Defines values for ApplicationsFormattedRetrieveParamsFormat.
const (
	ApplicationsFormattedRetrieveParamsFormatDotJson ApplicationsFormattedRetrieveParamsFormat = ".json"
)

// Defines values for ApplicationsFormattedUpdateParamsFormat.
const (
	ApplicationsFormattedUpdateParamsFormatDotJson ApplicationsFormattedUpdateParamsFormat = ".json"
)

// Defines values for ApplicationsFormattedListParamsFormat.
const (
	ApplicationsFormattedListParamsFormatDotJson ApplicationsFormattedListParamsFormat = ".json"
)

// Defines values for ApplicationsFormattedCreateParamsFormat.
const (
	DotJson ApplicationsFormattedCreateParamsFormat = ".json"
)

// Application defines model for Application.
type Application struct {
	Datasources *string             `json:"datasources,omitempty"`
	Id          *int                `json:"id,omitempty"`
	Identifier  *openapi_types.UUID `json:"identifier,omitempty"`
	Name        string              `json:"name"`
}

// ApplicationRequest defines model for ApplicationRequest.
type ApplicationRequest struct {
	Name string `json:"name"`
}

// Check defines model for Check.
type Check struct {
	union json.RawMessage
}

// CheckRequest defines model for CheckRequest.
type CheckRequest struct {
	union json.RawMessage
}

// DataSource defines model for DataSource.
type DataSource struct {
	union json.RawMessage
}

// DataSourceRequest defines model for DataSourceRequest.
type DataSourceRequest struct {
	union json.RawMessage
}

// DatatypeEnum * `bool` - Boolean
// * `int` - Integer
// * `str` - String
// * `datetime` - DateTime
type DatatypeEnum string

// HttpDataSource defines model for HttpDataSource.
type HttpDataSource struct {
	BasicAuthPassword *string `json:"basic_auth_password,omitempty"`
	BasicAuthUsername *string `json:"basic_auth_username,omitempty"`
	Checks            *string `json:"checks,omitempty"`
	Enabled           *bool   `json:"enabled,omitempty"`
	Id                *int    `json:"id,omitempty"`
	Label             *string `json:"label"`
	Url               string  `json:"url"`
}

// HttpDataSourceRequest defines model for HttpDataSourceRequest.
type HttpDataSourceRequest struct {
	BasicAuthPassword *string `json:"basic_auth_password,omitempty"`
	BasicAuthUsername *string `json:"basic_auth_username,omitempty"`
	Enabled           *bool   `json:"enabled,omitempty"`
	Label             *string `json:"label"`
	Url               string  `json:"url"`
}

// HttpDataSourceTyped defines model for HttpDataSourceTyped.
type HttpDataSourceTyped struct {
	BasicAuthPassword *string `json:"basic_auth_password,omitempty"`
	BasicAuthUsername *string `json:"basic_auth_username,omitempty"`
	Checks            *string `json:"checks,omitempty"`
	Enabled           *bool   `json:"enabled,omitempty"`
	Id                *int    `json:"id,omitempty"`
	Label             *string `json:"label"`
	Type              string  `json:"type"`
	Url               string  `json:"url"`
}

// HttpDataSourceTypedRequest defines model for HttpDataSourceTypedRequest.
type HttpDataSourceTypedRequest struct {
	BasicAuthPassword *string `json:"basic_auth_password,omitempty"`
	BasicAuthUsername *string `json:"basic_auth_username,omitempty"`
	Enabled           *bool   `json:"enabled,omitempty"`
	Label             *string `json:"label"`
	Type              string  `json:"type"`
	Url               string  `json:"url"`
}

// HttpStatusCheck defines model for HttpStatusCheck.
type HttpStatusCheck struct {
	Enabled    *bool  `json:"enabled,omitempty"`
	Id         *int   `json:"id,omitempty"`
	Label      string `json:"label"`
	StatusCode int    `json:"status_code"`
}

// HttpStatusCheckRequest defines model for HttpStatusCheckRequest.
type HttpStatusCheckRequest struct {
	Enabled    *bool  `json:"enabled,omitempty"`
	Label      string `json:"label"`
	StatusCode int    `json:"status_code"`
}

// HttpStatusCheckTyped defines model for HttpStatusCheckTyped.
type HttpStatusCheckTyped struct {
	Enabled    *bool  `json:"enabled,omitempty"`
	Id         *int   `json:"id,omitempty"`
	Label      string `json:"label"`
	StatusCode int    `json:"status_code"`
	Type       string `json:"type"`
}

// HttpStatusCheckTypedRequest defines model for HttpStatusCheckTypedRequest.
type HttpStatusCheckTypedRequest struct {
	Enabled    *bool  `json:"enabled,omitempty"`
	Label      string `json:"label"`
	StatusCode int    `json:"status_code"`
	Type       string `json:"type"`
}

// JsonDataCheck defines model for JsonDataCheck.
type JsonDataCheck struct {
	// Datatype * `bool` - Boolean
	// * `int` - Integer
	// * `str` - String
	// * `datetime` - DateTime
	Datatype DatatypeEnum `json:"datatype"`
	Enabled  *bool        `json:"enabled,omitempty"`
	Id       *int         `json:"id,omitempty"`
	Label    string       `json:"label"`

	// Operator * `lt` - Lower than
	// * `gt` - Greater then
	// * `eq` - Equals
	// * `neq` - Not Equal
	Operator OperatorEnum `json:"operator"`
	Path     string       `json:"path"`
	Value    string       `json:"value"`
}

// JsonDataCheckRequest defines model for JsonDataCheckRequest.
type JsonDataCheckRequest struct {
	// Datatype * `bool` - Boolean
	// * `int` - Integer
	// * `str` - String
	// * `datetime` - DateTime
	Datatype DatatypeEnum `json:"datatype"`
	Enabled  *bool        `json:"enabled,omitempty"`
	Label    string       `json:"label"`

	// Operator * `lt` - Lower than
	// * `gt` - Greater then
	// * `eq` - Equals
	// * `neq` - Not Equal
	Operator OperatorEnum `json:"operator"`
	Path     string       `json:"path"`
	Value    string       `json:"value"`
}

// JsonDataCheckTyped defines model for JsonDataCheckTyped.
type JsonDataCheckTyped struct {
	// Datatype * `bool` - Boolean
	// * `int` - Integer
	// * `str` - String
	// * `datetime` - DateTime
	Datatype DatatypeEnum `json:"datatype"`
	Enabled  *bool        `json:"enabled,omitempty"`
	Id       *int         `json:"id,omitempty"`
	Label    string       `json:"label"`

	// Operator * `lt` - Lower than
	// * `gt` - Greater then
	// * `eq` - Equals
	// * `neq` - Not Equal
	Operator OperatorEnum `json:"operator"`
	Path     string       `json:"path"`
	Type     string       `json:"type"`
	Value    string       `json:"value"`
}

// JsonDataCheckTypedRequest defines model for JsonDataCheckTypedRequest.
type JsonDataCheckTypedRequest struct {
	// Datatype * `bool` - Boolean
	// * `int` - Integer
	// * `str` - String
	// * `datetime` - DateTime
	Datatype DatatypeEnum `json:"datatype"`
	Enabled  *bool        `json:"enabled,omitempty"`
	Label    string       `json:"label"`

	// Operator * `lt` - Lower than
	// * `gt` - Greater then
	// * `eq` - Equals
	// * `neq` - Not Equal
	Operator OperatorEnum `json:"operator"`
	Path     string       `json:"path"`
	Type     string       `json:"type"`
	Value    string       `json:"value"`
}

// OperatorEnum * `lt` - Lower than
// * `gt` - Greater then
// * `eq` - Equals
// * `neq` - Not Equal
type OperatorEnum string

// ApplicationsFormattedDestroyParamsFormat defines parameters for ApplicationsFormattedDestroy.
type ApplicationsFormattedDestroyParamsFormat string

// ApplicationsFormattedRetrieveParamsFormat defines parameters for ApplicationsFormattedRetrieve.
type ApplicationsFormattedRetrieveParamsFormat string

// ApplicationsFormattedUpdateParamsFormat defines parameters for ApplicationsFormattedUpdate.
type ApplicationsFormattedUpdateParamsFormat string

// ApplicationsFormattedListParamsFormat defines parameters for ApplicationsFormattedList.
type ApplicationsFormattedListParamsFormat string

// ApplicationsFormattedCreateParamsFormat defines parameters for ApplicationsFormattedCreate.
type ApplicationsFormattedCreateParamsFormat string

// ApplicationsCreateJSONRequestBody defines body for ApplicationsCreate for application/json ContentType.
type ApplicationsCreateJSONRequestBody = ApplicationRequest

// ApplicationsDataSourcesCreateJSONRequestBody defines body for ApplicationsDataSourcesCreate for application/json ContentType.
type ApplicationsDataSourcesCreateJSONRequestBody = DataSourceRequest

// ApplicationsDataSourcesUpdateJSONRequestBody defines body for ApplicationsDataSourcesUpdate for application/json ContentType.
type ApplicationsDataSourcesUpdateJSONRequestBody = DataSourceRequest

// ApplicationsDataSourcesChecksCreateJSONRequestBody defines body for ApplicationsDataSourcesChecksCreate for application/json ContentType.
type ApplicationsDataSourcesChecksCreateJSONRequestBody = CheckRequest

// ApplicationsDataSourcesChecksUpdateJSONRequestBody defines body for ApplicationsDataSourcesChecksUpdate for application/json ContentType.
type ApplicationsDataSourcesChecksUpdateJSONRequestBody = CheckRequest

// ApplicationsUpdateJSONRequestBody defines body for ApplicationsUpdate for application/json ContentType.
type ApplicationsUpdateJSONRequestBody = ApplicationRequest

// ApplicationsFormattedUpdateJSONRequestBody defines body for ApplicationsFormattedUpdate for application/json ContentType.
type ApplicationsFormattedUpdateJSONRequestBody = ApplicationRequest

// ApplicationsFormattedCreateJSONRequestBody defines body for ApplicationsFormattedCreate for application/json ContentType.
type ApplicationsFormattedCreateJSONRequestBody = ApplicationRequest

// AsHttpStatusCheckTyped returns the union data inside the Check as a HttpStatusCheckTyped
func (t Check) AsHttpStatusCheckTyped() (HttpStatusCheckTyped, error) {
	var body HttpStatusCheckTyped
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpStatusCheckTyped overwrites any union data inside the Check as the provided HttpStatusCheckTyped
func (t *Check) FromHttpStatusCheckTyped(v HttpStatusCheckTyped) error {
	v.Type = "http-status"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpStatusCheckTyped performs a merge with any union data inside the Check, using the provided HttpStatusCheckTyped
func (t *Check) MergeHttpStatusCheckTyped(v HttpStatusCheckTyped) error {
	v.Type = "http-status"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJsonDataCheckTyped returns the union data inside the Check as a JsonDataCheckTyped
func (t Check) AsJsonDataCheckTyped() (JsonDataCheckTyped, error) {
	var body JsonDataCheckTyped
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJsonDataCheckTyped overwrites any union data inside the Check as the provided JsonDataCheckTyped
func (t *Check) FromJsonDataCheckTyped(v JsonDataCheckTyped) error {
	v.Type = "json-value"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJsonDataCheckTyped performs a merge with any union data inside the Check, using the provided JsonDataCheckTyped
func (t *Check) MergeJsonDataCheckTyped(v JsonDataCheckTyped) error {
	v.Type = "json-value"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Check) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Check) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "http-status":
		return t.AsHttpStatusCheckTyped()
	case "json-value":
		return t.AsJsonDataCheckTyped()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Check) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Check) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHttpStatusCheckTypedRequest returns the union data inside the CheckRequest as a HttpStatusCheckTypedRequest
func (t CheckRequest) AsHttpStatusCheckTypedRequest() (HttpStatusCheckTypedRequest, error) {
	var body HttpStatusCheckTypedRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpStatusCheckTypedRequest overwrites any union data inside the CheckRequest as the provided HttpStatusCheckTypedRequest
func (t *CheckRequest) FromHttpStatusCheckTypedRequest(v HttpStatusCheckTypedRequest) error {
	v.Type = "http-status"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpStatusCheckTypedRequest performs a merge with any union data inside the CheckRequest, using the provided HttpStatusCheckTypedRequest
func (t *CheckRequest) MergeHttpStatusCheckTypedRequest(v HttpStatusCheckTypedRequest) error {
	v.Type = "http-status"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJsonDataCheckTypedRequest returns the union data inside the CheckRequest as a JsonDataCheckTypedRequest
func (t CheckRequest) AsJsonDataCheckTypedRequest() (JsonDataCheckTypedRequest, error) {
	var body JsonDataCheckTypedRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJsonDataCheckTypedRequest overwrites any union data inside the CheckRequest as the provided JsonDataCheckTypedRequest
func (t *CheckRequest) FromJsonDataCheckTypedRequest(v JsonDataCheckTypedRequest) error {
	v.Type = "json-value"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJsonDataCheckTypedRequest performs a merge with any union data inside the CheckRequest, using the provided JsonDataCheckTypedRequest
func (t *CheckRequest) MergeJsonDataCheckTypedRequest(v JsonDataCheckTypedRequest) error {
	v.Type = "json-value"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CheckRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CheckRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "http-status":
		return t.AsHttpStatusCheckTypedRequest()
	case "json-value":
		return t.AsJsonDataCheckTypedRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CheckRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CheckRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHttpDataSourceTyped returns the union data inside the DataSource as a HttpDataSourceTyped
func (t DataSource) AsHttpDataSourceTyped() (HttpDataSourceTyped, error) {
	var body HttpDataSourceTyped
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpDataSourceTyped overwrites any union data inside the DataSource as the provided HttpDataSourceTyped
func (t *DataSource) FromHttpDataSourceTyped(v HttpDataSourceTyped) error {
	v.Type = "http"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpDataSourceTyped performs a merge with any union data inside the DataSource, using the provided HttpDataSourceTyped
func (t *DataSource) MergeHttpDataSourceTyped(v HttpDataSourceTyped) error {
	v.Type = "http"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataSource) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t DataSource) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "http":
		return t.AsHttpDataSourceTyped()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t DataSource) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataSource) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHttpDataSourceTypedRequest returns the union data inside the DataSourceRequest as a HttpDataSourceTypedRequest
func (t DataSourceRequest) AsHttpDataSourceTypedRequest() (HttpDataSourceTypedRequest, error) {
	var body HttpDataSourceTypedRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpDataSourceTypedRequest overwrites any union data inside the DataSourceRequest as the provided HttpDataSourceTypedRequest
func (t *DataSourceRequest) FromHttpDataSourceTypedRequest(v HttpDataSourceTypedRequest) error {
	v.Type = "http"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpDataSourceTypedRequest performs a merge with any union data inside the DataSourceRequest, using the provided HttpDataSourceTypedRequest
func (t *DataSourceRequest) MergeHttpDataSourceTypedRequest(v HttpDataSourceTypedRequest) error {
	v.Type = "http"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataSourceRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t DataSourceRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "http":
		return t.AsHttpDataSourceTypedRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t DataSourceRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataSourceRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ApplicationsList request
	ApplicationsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsCreateWithBody request with any body
	ApplicationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationsCreate(ctx context.Context, body ApplicationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsDataSourcesList request
	ApplicationsDataSourcesList(ctx context.Context, applicationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsDataSourcesCreateWithBody request with any body
	ApplicationsDataSourcesCreateWithBody(ctx context.Context, applicationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationsDataSourcesCreate(ctx context.Context, applicationId int, body ApplicationsDataSourcesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsDataSourcesDestroy request
	ApplicationsDataSourcesDestroy(ctx context.Context, applicationId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsDataSourcesRetrieve request
	ApplicationsDataSourcesRetrieve(ctx context.Context, applicationId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsDataSourcesUpdateWithBody request with any body
	ApplicationsDataSourcesUpdateWithBody(ctx context.Context, applicationId int, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationsDataSourcesUpdate(ctx context.Context, applicationId int, id int, body ApplicationsDataSourcesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsDataSourcesChecksList request
	ApplicationsDataSourcesChecksList(ctx context.Context, applicationId int, sourceId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsDataSourcesChecksCreateWithBody request with any body
	ApplicationsDataSourcesChecksCreateWithBody(ctx context.Context, applicationId int, sourceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationsDataSourcesChecksCreate(ctx context.Context, applicationId int, sourceId int, body ApplicationsDataSourcesChecksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsDataSourcesChecksDestroy request
	ApplicationsDataSourcesChecksDestroy(ctx context.Context, applicationId int, sourceId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsDataSourcesChecksRetrieve request
	ApplicationsDataSourcesChecksRetrieve(ctx context.Context, applicationId int, sourceId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsDataSourcesChecksUpdateWithBody request with any body
	ApplicationsDataSourcesChecksUpdateWithBody(ctx context.Context, applicationId int, sourceId int, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationsDataSourcesChecksUpdate(ctx context.Context, applicationId int, sourceId int, id int, body ApplicationsDataSourcesChecksUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsDestroy request
	ApplicationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsRetrieve request
	ApplicationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsUpdateWithBody request with any body
	ApplicationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationsUpdate(ctx context.Context, id int, body ApplicationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsFormattedDestroy request
	ApplicationsFormattedDestroy(ctx context.Context, id int, format ApplicationsFormattedDestroyParamsFormat, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsFormattedRetrieve request
	ApplicationsFormattedRetrieve(ctx context.Context, id int, format ApplicationsFormattedRetrieveParamsFormat, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsFormattedUpdateWithBody request with any body
	ApplicationsFormattedUpdateWithBody(ctx context.Context, id int, format ApplicationsFormattedUpdateParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationsFormattedUpdate(ctx context.Context, id int, format ApplicationsFormattedUpdateParamsFormat, body ApplicationsFormattedUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsFormattedList request
	ApplicationsFormattedList(ctx context.Context, format ApplicationsFormattedListParamsFormat, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationsFormattedCreateWithBody request with any body
	ApplicationsFormattedCreateWithBody(ctx context.Context, format ApplicationsFormattedCreateParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationsFormattedCreate(ctx context.Context, format ApplicationsFormattedCreateParamsFormat, body ApplicationsFormattedCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ApplicationsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsCreate(ctx context.Context, body ApplicationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesList(ctx context.Context, applicationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesListRequest(c.Server, applicationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesCreateWithBody(ctx context.Context, applicationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesCreateRequestWithBody(c.Server, applicationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesCreate(ctx context.Context, applicationId int, body ApplicationsDataSourcesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesCreateRequest(c.Server, applicationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesDestroy(ctx context.Context, applicationId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesDestroyRequest(c.Server, applicationId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesRetrieve(ctx context.Context, applicationId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesRetrieveRequest(c.Server, applicationId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesUpdateWithBody(ctx context.Context, applicationId int, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesUpdateRequestWithBody(c.Server, applicationId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesUpdate(ctx context.Context, applicationId int, id int, body ApplicationsDataSourcesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesUpdateRequest(c.Server, applicationId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesChecksList(ctx context.Context, applicationId int, sourceId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesChecksListRequest(c.Server, applicationId, sourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesChecksCreateWithBody(ctx context.Context, applicationId int, sourceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesChecksCreateRequestWithBody(c.Server, applicationId, sourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesChecksCreate(ctx context.Context, applicationId int, sourceId int, body ApplicationsDataSourcesChecksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesChecksCreateRequest(c.Server, applicationId, sourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesChecksDestroy(ctx context.Context, applicationId int, sourceId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesChecksDestroyRequest(c.Server, applicationId, sourceId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesChecksRetrieve(ctx context.Context, applicationId int, sourceId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesChecksRetrieveRequest(c.Server, applicationId, sourceId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesChecksUpdateWithBody(ctx context.Context, applicationId int, sourceId int, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesChecksUpdateRequestWithBody(c.Server, applicationId, sourceId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDataSourcesChecksUpdate(ctx context.Context, applicationId int, sourceId int, id int, body ApplicationsDataSourcesChecksUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDataSourcesChecksUpdateRequest(c.Server, applicationId, sourceId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsUpdate(ctx context.Context, id int, body ApplicationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsFormattedDestroy(ctx context.Context, id int, format ApplicationsFormattedDestroyParamsFormat, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsFormattedDestroyRequest(c.Server, id, format)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsFormattedRetrieve(ctx context.Context, id int, format ApplicationsFormattedRetrieveParamsFormat, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsFormattedRetrieveRequest(c.Server, id, format)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsFormattedUpdateWithBody(ctx context.Context, id int, format ApplicationsFormattedUpdateParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsFormattedUpdateRequestWithBody(c.Server, id, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsFormattedUpdate(ctx context.Context, id int, format ApplicationsFormattedUpdateParamsFormat, body ApplicationsFormattedUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsFormattedUpdateRequest(c.Server, id, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsFormattedList(ctx context.Context, format ApplicationsFormattedListParamsFormat, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsFormattedListRequest(c.Server, format)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsFormattedCreateWithBody(ctx context.Context, format ApplicationsFormattedCreateParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsFormattedCreateRequestWithBody(c.Server, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationsFormattedCreate(ctx context.Context, format ApplicationsFormattedCreateParamsFormat, body ApplicationsFormattedCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationsFormattedCreateRequest(c.Server, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewApplicationsListRequest generates requests for ApplicationsList
func NewApplicationsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationsCreateRequest calls the generic ApplicationsCreate builder with application/json body
func NewApplicationsCreateRequest(server string, body ApplicationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewApplicationsCreateRequestWithBody generates requests for ApplicationsCreate with any type of body
func NewApplicationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationsDataSourcesListRequest generates requests for ApplicationsDataSourcesList
func NewApplicationsDataSourcesListRequest(server string, applicationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/data-sources/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationsDataSourcesCreateRequest calls the generic ApplicationsDataSourcesCreate builder with application/json body
func NewApplicationsDataSourcesCreateRequest(server string, applicationId int, body ApplicationsDataSourcesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationsDataSourcesCreateRequestWithBody(server, applicationId, "application/json", bodyReader)
}

// NewApplicationsDataSourcesCreateRequestWithBody generates requests for ApplicationsDataSourcesCreate with any type of body
func NewApplicationsDataSourcesCreateRequestWithBody(server string, applicationId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/data-sources/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationsDataSourcesDestroyRequest generates requests for ApplicationsDataSourcesDestroy
func NewApplicationsDataSourcesDestroyRequest(server string, applicationId int, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/data-sources/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationsDataSourcesRetrieveRequest generates requests for ApplicationsDataSourcesRetrieve
func NewApplicationsDataSourcesRetrieveRequest(server string, applicationId int, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/data-sources/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationsDataSourcesUpdateRequest calls the generic ApplicationsDataSourcesUpdate builder with application/json body
func NewApplicationsDataSourcesUpdateRequest(server string, applicationId int, id int, body ApplicationsDataSourcesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationsDataSourcesUpdateRequestWithBody(server, applicationId, id, "application/json", bodyReader)
}

// NewApplicationsDataSourcesUpdateRequestWithBody generates requests for ApplicationsDataSourcesUpdate with any type of body
func NewApplicationsDataSourcesUpdateRequestWithBody(server string, applicationId int, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/data-sources/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationsDataSourcesChecksListRequest generates requests for ApplicationsDataSourcesChecksList
func NewApplicationsDataSourcesChecksListRequest(server string, applicationId int, sourceId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "source_id", runtime.ParamLocationPath, sourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/data-sources/%s/checks/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationsDataSourcesChecksCreateRequest calls the generic ApplicationsDataSourcesChecksCreate builder with application/json body
func NewApplicationsDataSourcesChecksCreateRequest(server string, applicationId int, sourceId int, body ApplicationsDataSourcesChecksCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationsDataSourcesChecksCreateRequestWithBody(server, applicationId, sourceId, "application/json", bodyReader)
}

// NewApplicationsDataSourcesChecksCreateRequestWithBody generates requests for ApplicationsDataSourcesChecksCreate with any type of body
func NewApplicationsDataSourcesChecksCreateRequestWithBody(server string, applicationId int, sourceId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "source_id", runtime.ParamLocationPath, sourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/data-sources/%s/checks/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationsDataSourcesChecksDestroyRequest generates requests for ApplicationsDataSourcesChecksDestroy
func NewApplicationsDataSourcesChecksDestroyRequest(server string, applicationId int, sourceId int, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "source_id", runtime.ParamLocationPath, sourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/data-sources/%s/checks/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationsDataSourcesChecksRetrieveRequest generates requests for ApplicationsDataSourcesChecksRetrieve
func NewApplicationsDataSourcesChecksRetrieveRequest(server string, applicationId int, sourceId int, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "source_id", runtime.ParamLocationPath, sourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/data-sources/%s/checks/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationsDataSourcesChecksUpdateRequest calls the generic ApplicationsDataSourcesChecksUpdate builder with application/json body
func NewApplicationsDataSourcesChecksUpdateRequest(server string, applicationId int, sourceId int, id int, body ApplicationsDataSourcesChecksUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationsDataSourcesChecksUpdateRequestWithBody(server, applicationId, sourceId, id, "application/json", bodyReader)
}

// NewApplicationsDataSourcesChecksUpdateRequestWithBody generates requests for ApplicationsDataSourcesChecksUpdate with any type of body
func NewApplicationsDataSourcesChecksUpdateRequestWithBody(server string, applicationId int, sourceId int, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application_id", runtime.ParamLocationPath, applicationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "source_id", runtime.ParamLocationPath, sourceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/data-sources/%s/checks/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationsDestroyRequest generates requests for ApplicationsDestroy
func NewApplicationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationsRetrieveRequest generates requests for ApplicationsRetrieve
func NewApplicationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationsUpdateRequest calls the generic ApplicationsUpdate builder with application/json body
func NewApplicationsUpdateRequest(server string, id int, body ApplicationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewApplicationsUpdateRequestWithBody generates requests for ApplicationsUpdate with any type of body
func NewApplicationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationsFormattedDestroyRequest generates requests for ApplicationsFormattedDestroy
func NewApplicationsFormattedDestroyRequest(server string, id int, format ApplicationsFormattedDestroyParamsFormat) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationsFormattedRetrieveRequest generates requests for ApplicationsFormattedRetrieve
func NewApplicationsFormattedRetrieveRequest(server string, id int, format ApplicationsFormattedRetrieveParamsFormat) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationsFormattedUpdateRequest calls the generic ApplicationsFormattedUpdate builder with application/json body
func NewApplicationsFormattedUpdateRequest(server string, id int, format ApplicationsFormattedUpdateParamsFormat, body ApplicationsFormattedUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationsFormattedUpdateRequestWithBody(server, id, format, "application/json", bodyReader)
}

// NewApplicationsFormattedUpdateRequestWithBody generates requests for ApplicationsFormattedUpdate with any type of body
func NewApplicationsFormattedUpdateRequestWithBody(server string, id int, format ApplicationsFormattedUpdateParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications/%s%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationsFormattedListRequest generates requests for ApplicationsFormattedList
func NewApplicationsFormattedListRequest(server string, format ApplicationsFormattedListParamsFormat) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationsFormattedCreateRequest calls the generic ApplicationsFormattedCreate builder with application/json body
func NewApplicationsFormattedCreateRequest(server string, format ApplicationsFormattedCreateParamsFormat, body ApplicationsFormattedCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationsFormattedCreateRequestWithBody(server, format, "application/json", bodyReader)
}

// NewApplicationsFormattedCreateRequestWithBody generates requests for ApplicationsFormattedCreate with any type of body
func NewApplicationsFormattedCreateRequestWithBody(server string, format ApplicationsFormattedCreateParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/applications%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ApplicationsListWithResponse request
	ApplicationsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApplicationsListResponse, error)

	// ApplicationsCreateWithBodyWithResponse request with any body
	ApplicationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsCreateResponse, error)

	ApplicationsCreateWithResponse(ctx context.Context, body ApplicationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsCreateResponse, error)

	// ApplicationsDataSourcesListWithResponse request
	ApplicationsDataSourcesListWithResponse(ctx context.Context, applicationId int, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesListResponse, error)

	// ApplicationsDataSourcesCreateWithBodyWithResponse request with any body
	ApplicationsDataSourcesCreateWithBodyWithResponse(ctx context.Context, applicationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesCreateResponse, error)

	ApplicationsDataSourcesCreateWithResponse(ctx context.Context, applicationId int, body ApplicationsDataSourcesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesCreateResponse, error)

	// ApplicationsDataSourcesDestroyWithResponse request
	ApplicationsDataSourcesDestroyWithResponse(ctx context.Context, applicationId int, id int, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesDestroyResponse, error)

	// ApplicationsDataSourcesRetrieveWithResponse request
	ApplicationsDataSourcesRetrieveWithResponse(ctx context.Context, applicationId int, id int, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesRetrieveResponse, error)

	// ApplicationsDataSourcesUpdateWithBodyWithResponse request with any body
	ApplicationsDataSourcesUpdateWithBodyWithResponse(ctx context.Context, applicationId int, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesUpdateResponse, error)

	ApplicationsDataSourcesUpdateWithResponse(ctx context.Context, applicationId int, id int, body ApplicationsDataSourcesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesUpdateResponse, error)

	// ApplicationsDataSourcesChecksListWithResponse request
	ApplicationsDataSourcesChecksListWithResponse(ctx context.Context, applicationId int, sourceId int, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksListResponse, error)

	// ApplicationsDataSourcesChecksCreateWithBodyWithResponse request with any body
	ApplicationsDataSourcesChecksCreateWithBodyWithResponse(ctx context.Context, applicationId int, sourceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksCreateResponse, error)

	ApplicationsDataSourcesChecksCreateWithResponse(ctx context.Context, applicationId int, sourceId int, body ApplicationsDataSourcesChecksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksCreateResponse, error)

	// ApplicationsDataSourcesChecksDestroyWithResponse request
	ApplicationsDataSourcesChecksDestroyWithResponse(ctx context.Context, applicationId int, sourceId int, id int, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksDestroyResponse, error)

	// ApplicationsDataSourcesChecksRetrieveWithResponse request
	ApplicationsDataSourcesChecksRetrieveWithResponse(ctx context.Context, applicationId int, sourceId int, id int, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksRetrieveResponse, error)

	// ApplicationsDataSourcesChecksUpdateWithBodyWithResponse request with any body
	ApplicationsDataSourcesChecksUpdateWithBodyWithResponse(ctx context.Context, applicationId int, sourceId int, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksUpdateResponse, error)

	ApplicationsDataSourcesChecksUpdateWithResponse(ctx context.Context, applicationId int, sourceId int, id int, body ApplicationsDataSourcesChecksUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksUpdateResponse, error)

	// ApplicationsDestroyWithResponse request
	ApplicationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ApplicationsDestroyResponse, error)

	// ApplicationsRetrieveWithResponse request
	ApplicationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ApplicationsRetrieveResponse, error)

	// ApplicationsUpdateWithBodyWithResponse request with any body
	ApplicationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsUpdateResponse, error)

	ApplicationsUpdateWithResponse(ctx context.Context, id int, body ApplicationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsUpdateResponse, error)

	// ApplicationsFormattedDestroyWithResponse request
	ApplicationsFormattedDestroyWithResponse(ctx context.Context, id int, format ApplicationsFormattedDestroyParamsFormat, reqEditors ...RequestEditorFn) (*ApplicationsFormattedDestroyResponse, error)

	// ApplicationsFormattedRetrieveWithResponse request
	ApplicationsFormattedRetrieveWithResponse(ctx context.Context, id int, format ApplicationsFormattedRetrieveParamsFormat, reqEditors ...RequestEditorFn) (*ApplicationsFormattedRetrieveResponse, error)

	// ApplicationsFormattedUpdateWithBodyWithResponse request with any body
	ApplicationsFormattedUpdateWithBodyWithResponse(ctx context.Context, id int, format ApplicationsFormattedUpdateParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsFormattedUpdateResponse, error)

	ApplicationsFormattedUpdateWithResponse(ctx context.Context, id int, format ApplicationsFormattedUpdateParamsFormat, body ApplicationsFormattedUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsFormattedUpdateResponse, error)

	// ApplicationsFormattedListWithResponse request
	ApplicationsFormattedListWithResponse(ctx context.Context, format ApplicationsFormattedListParamsFormat, reqEditors ...RequestEditorFn) (*ApplicationsFormattedListResponse, error)

	// ApplicationsFormattedCreateWithBodyWithResponse request with any body
	ApplicationsFormattedCreateWithBodyWithResponse(ctx context.Context, format ApplicationsFormattedCreateParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsFormattedCreateResponse, error)

	ApplicationsFormattedCreateWithResponse(ctx context.Context, format ApplicationsFormattedCreateParamsFormat, body ApplicationsFormattedCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsFormattedCreateResponse, error)
}

type ApplicationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Application
}

// Status returns HTTPResponse.Status
func (r ApplicationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Application
}

// Status returns HTTPResponse.Status
func (r ApplicationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsDataSourcesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DataSource
}

// Status returns HTTPResponse.Status
func (r ApplicationsDataSourcesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsDataSourcesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsDataSourcesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DataSource
}

// Status returns HTTPResponse.Status
func (r ApplicationsDataSourcesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsDataSourcesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsDataSourcesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationsDataSourcesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsDataSourcesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsDataSourcesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataSource
}

// Status returns HTTPResponse.Status
func (r ApplicationsDataSourcesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsDataSourcesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsDataSourcesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataSource
}

// Status returns HTTPResponse.Status
func (r ApplicationsDataSourcesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsDataSourcesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsDataSourcesChecksListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Check
}

// Status returns HTTPResponse.Status
func (r ApplicationsDataSourcesChecksListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsDataSourcesChecksListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsDataSourcesChecksCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Check
}

// Status returns HTTPResponse.Status
func (r ApplicationsDataSourcesChecksCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsDataSourcesChecksCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsDataSourcesChecksDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationsDataSourcesChecksDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsDataSourcesChecksDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsDataSourcesChecksRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Check
}

// Status returns HTTPResponse.Status
func (r ApplicationsDataSourcesChecksRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsDataSourcesChecksRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsDataSourcesChecksUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Check
}

// Status returns HTTPResponse.Status
func (r ApplicationsDataSourcesChecksUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsDataSourcesChecksUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r ApplicationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r ApplicationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsFormattedDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationsFormattedDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsFormattedDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsFormattedRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r ApplicationsFormattedRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsFormattedRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsFormattedUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r ApplicationsFormattedUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsFormattedUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsFormattedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Application
}

// Status returns HTTPResponse.Status
func (r ApplicationsFormattedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsFormattedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationsFormattedCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Application
}

// Status returns HTTPResponse.Status
func (r ApplicationsFormattedCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationsFormattedCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ApplicationsListWithResponse request returning *ApplicationsListResponse
func (c *ClientWithResponses) ApplicationsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApplicationsListResponse, error) {
	rsp, err := c.ApplicationsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsListResponse(rsp)
}

// ApplicationsCreateWithBodyWithResponse request with arbitrary body returning *ApplicationsCreateResponse
func (c *ClientWithResponses) ApplicationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsCreateResponse, error) {
	rsp, err := c.ApplicationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsCreateResponse(rsp)
}

func (c *ClientWithResponses) ApplicationsCreateWithResponse(ctx context.Context, body ApplicationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsCreateResponse, error) {
	rsp, err := c.ApplicationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsCreateResponse(rsp)
}

// ApplicationsDataSourcesListWithResponse request returning *ApplicationsDataSourcesListResponse
func (c *ClientWithResponses) ApplicationsDataSourcesListWithResponse(ctx context.Context, applicationId int, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesListResponse, error) {
	rsp, err := c.ApplicationsDataSourcesList(ctx, applicationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesListResponse(rsp)
}

// ApplicationsDataSourcesCreateWithBodyWithResponse request with arbitrary body returning *ApplicationsDataSourcesCreateResponse
func (c *ClientWithResponses) ApplicationsDataSourcesCreateWithBodyWithResponse(ctx context.Context, applicationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesCreateResponse, error) {
	rsp, err := c.ApplicationsDataSourcesCreateWithBody(ctx, applicationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesCreateResponse(rsp)
}

func (c *ClientWithResponses) ApplicationsDataSourcesCreateWithResponse(ctx context.Context, applicationId int, body ApplicationsDataSourcesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesCreateResponse, error) {
	rsp, err := c.ApplicationsDataSourcesCreate(ctx, applicationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesCreateResponse(rsp)
}

// ApplicationsDataSourcesDestroyWithResponse request returning *ApplicationsDataSourcesDestroyResponse
func (c *ClientWithResponses) ApplicationsDataSourcesDestroyWithResponse(ctx context.Context, applicationId int, id int, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesDestroyResponse, error) {
	rsp, err := c.ApplicationsDataSourcesDestroy(ctx, applicationId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesDestroyResponse(rsp)
}

// ApplicationsDataSourcesRetrieveWithResponse request returning *ApplicationsDataSourcesRetrieveResponse
func (c *ClientWithResponses) ApplicationsDataSourcesRetrieveWithResponse(ctx context.Context, applicationId int, id int, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesRetrieveResponse, error) {
	rsp, err := c.ApplicationsDataSourcesRetrieve(ctx, applicationId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesRetrieveResponse(rsp)
}

// ApplicationsDataSourcesUpdateWithBodyWithResponse request with arbitrary body returning *ApplicationsDataSourcesUpdateResponse
func (c *ClientWithResponses) ApplicationsDataSourcesUpdateWithBodyWithResponse(ctx context.Context, applicationId int, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesUpdateResponse, error) {
	rsp, err := c.ApplicationsDataSourcesUpdateWithBody(ctx, applicationId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ApplicationsDataSourcesUpdateWithResponse(ctx context.Context, applicationId int, id int, body ApplicationsDataSourcesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesUpdateResponse, error) {
	rsp, err := c.ApplicationsDataSourcesUpdate(ctx, applicationId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesUpdateResponse(rsp)
}

// ApplicationsDataSourcesChecksListWithResponse request returning *ApplicationsDataSourcesChecksListResponse
func (c *ClientWithResponses) ApplicationsDataSourcesChecksListWithResponse(ctx context.Context, applicationId int, sourceId int, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksListResponse, error) {
	rsp, err := c.ApplicationsDataSourcesChecksList(ctx, applicationId, sourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesChecksListResponse(rsp)
}

// ApplicationsDataSourcesChecksCreateWithBodyWithResponse request with arbitrary body returning *ApplicationsDataSourcesChecksCreateResponse
func (c *ClientWithResponses) ApplicationsDataSourcesChecksCreateWithBodyWithResponse(ctx context.Context, applicationId int, sourceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksCreateResponse, error) {
	rsp, err := c.ApplicationsDataSourcesChecksCreateWithBody(ctx, applicationId, sourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesChecksCreateResponse(rsp)
}

func (c *ClientWithResponses) ApplicationsDataSourcesChecksCreateWithResponse(ctx context.Context, applicationId int, sourceId int, body ApplicationsDataSourcesChecksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksCreateResponse, error) {
	rsp, err := c.ApplicationsDataSourcesChecksCreate(ctx, applicationId, sourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesChecksCreateResponse(rsp)
}

// ApplicationsDataSourcesChecksDestroyWithResponse request returning *ApplicationsDataSourcesChecksDestroyResponse
func (c *ClientWithResponses) ApplicationsDataSourcesChecksDestroyWithResponse(ctx context.Context, applicationId int, sourceId int, id int, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksDestroyResponse, error) {
	rsp, err := c.ApplicationsDataSourcesChecksDestroy(ctx, applicationId, sourceId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesChecksDestroyResponse(rsp)
}

// ApplicationsDataSourcesChecksRetrieveWithResponse request returning *ApplicationsDataSourcesChecksRetrieveResponse
func (c *ClientWithResponses) ApplicationsDataSourcesChecksRetrieveWithResponse(ctx context.Context, applicationId int, sourceId int, id int, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksRetrieveResponse, error) {
	rsp, err := c.ApplicationsDataSourcesChecksRetrieve(ctx, applicationId, sourceId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesChecksRetrieveResponse(rsp)
}

// ApplicationsDataSourcesChecksUpdateWithBodyWithResponse request with arbitrary body returning *ApplicationsDataSourcesChecksUpdateResponse
func (c *ClientWithResponses) ApplicationsDataSourcesChecksUpdateWithBodyWithResponse(ctx context.Context, applicationId int, sourceId int, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksUpdateResponse, error) {
	rsp, err := c.ApplicationsDataSourcesChecksUpdateWithBody(ctx, applicationId, sourceId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesChecksUpdateResponse(rsp)
}

func (c *ClientWithResponses) ApplicationsDataSourcesChecksUpdateWithResponse(ctx context.Context, applicationId int, sourceId int, id int, body ApplicationsDataSourcesChecksUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsDataSourcesChecksUpdateResponse, error) {
	rsp, err := c.ApplicationsDataSourcesChecksUpdate(ctx, applicationId, sourceId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDataSourcesChecksUpdateResponse(rsp)
}

// ApplicationsDestroyWithResponse request returning *ApplicationsDestroyResponse
func (c *ClientWithResponses) ApplicationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ApplicationsDestroyResponse, error) {
	rsp, err := c.ApplicationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsDestroyResponse(rsp)
}

// ApplicationsRetrieveWithResponse request returning *ApplicationsRetrieveResponse
func (c *ClientWithResponses) ApplicationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ApplicationsRetrieveResponse, error) {
	rsp, err := c.ApplicationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsRetrieveResponse(rsp)
}

// ApplicationsUpdateWithBodyWithResponse request with arbitrary body returning *ApplicationsUpdateResponse
func (c *ClientWithResponses) ApplicationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsUpdateResponse, error) {
	rsp, err := c.ApplicationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ApplicationsUpdateWithResponse(ctx context.Context, id int, body ApplicationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsUpdateResponse, error) {
	rsp, err := c.ApplicationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsUpdateResponse(rsp)
}

// ApplicationsFormattedDestroyWithResponse request returning *ApplicationsFormattedDestroyResponse
func (c *ClientWithResponses) ApplicationsFormattedDestroyWithResponse(ctx context.Context, id int, format ApplicationsFormattedDestroyParamsFormat, reqEditors ...RequestEditorFn) (*ApplicationsFormattedDestroyResponse, error) {
	rsp, err := c.ApplicationsFormattedDestroy(ctx, id, format, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsFormattedDestroyResponse(rsp)
}

// ApplicationsFormattedRetrieveWithResponse request returning *ApplicationsFormattedRetrieveResponse
func (c *ClientWithResponses) ApplicationsFormattedRetrieveWithResponse(ctx context.Context, id int, format ApplicationsFormattedRetrieveParamsFormat, reqEditors ...RequestEditorFn) (*ApplicationsFormattedRetrieveResponse, error) {
	rsp, err := c.ApplicationsFormattedRetrieve(ctx, id, format, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsFormattedRetrieveResponse(rsp)
}

// ApplicationsFormattedUpdateWithBodyWithResponse request with arbitrary body returning *ApplicationsFormattedUpdateResponse
func (c *ClientWithResponses) ApplicationsFormattedUpdateWithBodyWithResponse(ctx context.Context, id int, format ApplicationsFormattedUpdateParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsFormattedUpdateResponse, error) {
	rsp, err := c.ApplicationsFormattedUpdateWithBody(ctx, id, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsFormattedUpdateResponse(rsp)
}

func (c *ClientWithResponses) ApplicationsFormattedUpdateWithResponse(ctx context.Context, id int, format ApplicationsFormattedUpdateParamsFormat, body ApplicationsFormattedUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsFormattedUpdateResponse, error) {
	rsp, err := c.ApplicationsFormattedUpdate(ctx, id, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsFormattedUpdateResponse(rsp)
}

// ApplicationsFormattedListWithResponse request returning *ApplicationsFormattedListResponse
func (c *ClientWithResponses) ApplicationsFormattedListWithResponse(ctx context.Context, format ApplicationsFormattedListParamsFormat, reqEditors ...RequestEditorFn) (*ApplicationsFormattedListResponse, error) {
	rsp, err := c.ApplicationsFormattedList(ctx, format, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsFormattedListResponse(rsp)
}

// ApplicationsFormattedCreateWithBodyWithResponse request with arbitrary body returning *ApplicationsFormattedCreateResponse
func (c *ClientWithResponses) ApplicationsFormattedCreateWithBodyWithResponse(ctx context.Context, format ApplicationsFormattedCreateParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationsFormattedCreateResponse, error) {
	rsp, err := c.ApplicationsFormattedCreateWithBody(ctx, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsFormattedCreateResponse(rsp)
}

func (c *ClientWithResponses) ApplicationsFormattedCreateWithResponse(ctx context.Context, format ApplicationsFormattedCreateParamsFormat, body ApplicationsFormattedCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationsFormattedCreateResponse, error) {
	rsp, err := c.ApplicationsFormattedCreate(ctx, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationsFormattedCreateResponse(rsp)
}

// ParseApplicationsListResponse parses an HTTP response from a ApplicationsListWithResponse call
func ParseApplicationsListResponse(rsp *http.Response) (*ApplicationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationsCreateResponse parses an HTTP response from a ApplicationsCreateWithResponse call
func ParseApplicationsCreateResponse(rsp *http.Response) (*ApplicationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseApplicationsDataSourcesListResponse parses an HTTP response from a ApplicationsDataSourcesListWithResponse call
func ParseApplicationsDataSourcesListResponse(rsp *http.Response) (*ApplicationsDataSourcesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsDataSourcesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DataSource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationsDataSourcesCreateResponse parses an HTTP response from a ApplicationsDataSourcesCreateWithResponse call
func ParseApplicationsDataSourcesCreateResponse(rsp *http.Response) (*ApplicationsDataSourcesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsDataSourcesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DataSource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseApplicationsDataSourcesDestroyResponse parses an HTTP response from a ApplicationsDataSourcesDestroyWithResponse call
func ParseApplicationsDataSourcesDestroyResponse(rsp *http.Response) (*ApplicationsDataSourcesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsDataSourcesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationsDataSourcesRetrieveResponse parses an HTTP response from a ApplicationsDataSourcesRetrieveWithResponse call
func ParseApplicationsDataSourcesRetrieveResponse(rsp *http.Response) (*ApplicationsDataSourcesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsDataSourcesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataSource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationsDataSourcesUpdateResponse parses an HTTP response from a ApplicationsDataSourcesUpdateWithResponse call
func ParseApplicationsDataSourcesUpdateResponse(rsp *http.Response) (*ApplicationsDataSourcesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsDataSourcesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataSource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationsDataSourcesChecksListResponse parses an HTTP response from a ApplicationsDataSourcesChecksListWithResponse call
func ParseApplicationsDataSourcesChecksListResponse(rsp *http.Response) (*ApplicationsDataSourcesChecksListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsDataSourcesChecksListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Check
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationsDataSourcesChecksCreateResponse parses an HTTP response from a ApplicationsDataSourcesChecksCreateWithResponse call
func ParseApplicationsDataSourcesChecksCreateResponse(rsp *http.Response) (*ApplicationsDataSourcesChecksCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsDataSourcesChecksCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Check
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseApplicationsDataSourcesChecksDestroyResponse parses an HTTP response from a ApplicationsDataSourcesChecksDestroyWithResponse call
func ParseApplicationsDataSourcesChecksDestroyResponse(rsp *http.Response) (*ApplicationsDataSourcesChecksDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsDataSourcesChecksDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationsDataSourcesChecksRetrieveResponse parses an HTTP response from a ApplicationsDataSourcesChecksRetrieveWithResponse call
func ParseApplicationsDataSourcesChecksRetrieveResponse(rsp *http.Response) (*ApplicationsDataSourcesChecksRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsDataSourcesChecksRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Check
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationsDataSourcesChecksUpdateResponse parses an HTTP response from a ApplicationsDataSourcesChecksUpdateWithResponse call
func ParseApplicationsDataSourcesChecksUpdateResponse(rsp *http.Response) (*ApplicationsDataSourcesChecksUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsDataSourcesChecksUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Check
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationsDestroyResponse parses an HTTP response from a ApplicationsDestroyWithResponse call
func ParseApplicationsDestroyResponse(rsp *http.Response) (*ApplicationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationsRetrieveResponse parses an HTTP response from a ApplicationsRetrieveWithResponse call
func ParseApplicationsRetrieveResponse(rsp *http.Response) (*ApplicationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationsUpdateResponse parses an HTTP response from a ApplicationsUpdateWithResponse call
func ParseApplicationsUpdateResponse(rsp *http.Response) (*ApplicationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationsFormattedDestroyResponse parses an HTTP response from a ApplicationsFormattedDestroyWithResponse call
func ParseApplicationsFormattedDestroyResponse(rsp *http.Response) (*ApplicationsFormattedDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsFormattedDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationsFormattedRetrieveResponse parses an HTTP response from a ApplicationsFormattedRetrieveWithResponse call
func ParseApplicationsFormattedRetrieveResponse(rsp *http.Response) (*ApplicationsFormattedRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsFormattedRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationsFormattedUpdateResponse parses an HTTP response from a ApplicationsFormattedUpdateWithResponse call
func ParseApplicationsFormattedUpdateResponse(rsp *http.Response) (*ApplicationsFormattedUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsFormattedUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationsFormattedListResponse parses an HTTP response from a ApplicationsFormattedListWithResponse call
func ParseApplicationsFormattedListResponse(rsp *http.Response) (*ApplicationsFormattedListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsFormattedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationsFormattedCreateResponse parses an HTTP response from a ApplicationsFormattedCreateWithResponse call
func ParseApplicationsFormattedCreateResponse(rsp *http.Response) (*ApplicationsFormattedCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationsFormattedCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
